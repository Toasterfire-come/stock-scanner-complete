#!/usr/bin/env python3
"""
Django Migration Conflict Fix Script
Resolves Django migration conflicts by creating a clean migration state.

This script:
1. Backs up existing migrations
2. Creates a clean migration sequence
3. Preserves all model changes
4. Resolves dependency conflicts

Usage:
    python scripts/setup/fix_migration_conflicts.py

Author: Stock Scanner Project
Version: 1.0.0
"""

import os
import shutil
import sys
from datetime import datetime
from pathlib import Path

class MigrationFixer:
    """Fixes Django migration conflicts"""
    
    def __init__(self):
        self.app_name = "stocks"
        self.migrations_dir = Path(f"{self.app_name}/migrations")
        self.backup_dir = Path(f"migration_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}")
        
        print("üîß Django Migration Conflict Fixer")
        print("=" * 50)
        print(f"üìÅ App: {self.app_name}")
        print(f"üìÇ Migrations: {self.migrations_dir}")
        print()

    def backup_migrations(self):
        """Backup existing migrations"""
        print("üíæ Creating backup of existing migrations...")
        
        if self.migrations_dir.exists():
            shutil.copytree(self.migrations_dir, self.backup_dir)
            print(f"‚úÖ Backup created: {self.backup_dir}")
            return True
        else:
            print("‚ùå Migrations directory not found")
            return False

    def create_clean_migrations(self):
        """Create clean migration files in proper sequence"""
        print("üßπ Creating clean migration sequence...")
        
        # Remove problematic migrations but keep __init__.py
        for file in self.migrations_dir.glob("*.py"):
            if file.name != "__init__.py":
                file.unlink()
                print(f"   Removed: {file.name}")
        
        # Create 0001_initial.py (comprehensive initial migration)
        initial_migration = '''# Generated by Django migration fixer

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='StockAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('symbol', models.CharField(db_index=True, help_text='Stock ticker symbol (e.g., AAPL)', max_length=10)),
                ('target_price', models.DecimalField(decimal_places=2, help_text='Target price for alert', max_digits=10)),
                ('alert_type', models.CharField(choices=[('above', 'Above Target'), ('below', 'Below Target')], help_text='Alert when price goes above or below target', max_length=5)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this alert is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('triggered_at', models.DateTimeField(blank=True, help_text='When the alert was triggered', null=True)),
                ('sent', models.BooleanField(default=False, help_text='Whether notification has been sent')),
                ('company_name', models.CharField(blank=True, max_length=255)),
                ('price_change_today', models.FloatField(blank=True, help_text='Price change from previous close', null=True)),
                ('price_change_percent', models.FloatField(blank=True, help_text='Percentage change from previous close', null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stock_alerts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Stock Alert',
                'verbose_name_plural': 'Stock Alerts',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('membership_type', models.CharField(choices=[('free', 'Free - $0/month'), ('basic', 'Basic - $9.99/month'), ('professional', 'Professional - $29.99/month'), ('expert', 'Expert - $49.99/month')], default='free', help_text='User membership level', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('stripe_customer_id', models.CharField(blank=True, help_text='Stripe customer ID for billing', max_length=255)),
                ('stripe_subscription_id', models.CharField(blank=True, help_text='Stripe subscription ID', max_length=255)),
                ('subscription_status', models.CharField(choices=[('active', 'Active'), ('canceled', 'Canceled'), ('past_due', 'Past Due'), ('unpaid', 'Unpaid')], default='active', help_text='Subscription status', max_length=20)),
                ('next_billing_date', models.DateField(blank=True, help_text='Next billing date', null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='membership', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Membership',
                'verbose_name_plural': 'User Memberships',
            },
        ),
        migrations.CreateModel(
            name='APIUsageTracking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('endpoint', models.CharField(db_index=True, max_length=200)),
                ('method', models.CharField(choices=[('GET', 'GET'), ('POST', 'POST'), ('PUT', 'PUT'), ('DELETE', 'DELETE'), ('PATCH', 'PATCH')], max_length=10)),
                ('timestamp', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('response_time_ms', models.IntegerField(help_text='Response time in milliseconds')),
                ('status_code', models.IntegerField()),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True)),
                ('request_size_bytes', models.IntegerField(default=0)),
                ('response_size_bytes', models.IntegerField(default=0)),
                ('membership_tier', models.CharField(db_index=True, max_length=20)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'API Usage Tracking',
                'verbose_name_plural': 'API Usage Tracking',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.AddIndex(
            model_name='stockalert',
            index=models.Index(fields=['symbol', 'user'], name='stocks_stockalert_symbol_user_idx'),
        ),
        migrations.AddIndex(
            model_name='stockalert',
            index=models.Index(fields=['-created_at'], name='stocks_stockalert_created_idx'),
        ),
        migrations.AddIndex(
            model_name='apiusagetracking',
            index=models.Index(fields=['endpoint', 'timestamp'], name='stocks_apiusage_endpoint_time_idx'),
        ),
        migrations.AddIndex(
            model_name='apiusagetracking',
            index=models.Index(fields=['user', 'timestamp'], name='stocks_apiusage_user_time_idx'),
        ),
    ]
'''
        
        with open(self.migrations_dir / "0001_initial.py", 'w') as f:
            f.write(initial_migration)
        
        print("‚úÖ Created clean 0001_initial.py with all models and fields")

    def verify_clean_state(self):
        """Verify the migration state is clean"""
        print("üîç Verifying clean migration state...")
        
        migration_files = list(self.migrations_dir.glob("*.py"))
        migration_files = [f for f in migration_files if f.name != "__init__.py"]
        
        if len(migration_files) == 1 and migration_files[0].name == "0001_initial.py":
            print("‚úÖ Clean migration state verified")
            return True
        else:
            print(f"‚ùå Expected 1 migration file, found {len(migration_files)}")
            return False

    def show_instructions(self):
        """Show next steps instructions"""
        print("\n" + "=" * 60)
        print("üìã NEXT STEPS")
        print("=" * 60)
        print("1. Run Django migrations:")
        print("   python manage.py migrate")
        print()
        print("2. If you have existing data, you may need to:")
        print("   python manage.py migrate --fake-initial")
        print()
        print("3. Create a superuser if needed:")
        print("   python manage.py createsuperuser")
        print()
        print("4. Test the admin interface:")
        print("   python manage.py runserver")
        print("   Visit: http://localhost:8000/admin")
        print()
        print("‚úÖ Migration conflicts have been resolved!")
        print(f"üíæ Backup available at: {self.backup_dir}")

    def run_fix(self):
        """Run the complete migration fix process"""
        print("üöÄ Starting migration conflict resolution...")
        print()
        
        # Step 1: Backup
        if not self.backup_migrations():
            print("‚ùå Could not create backup")
            return False
        
        # Step 2: Create clean migrations
        self.create_clean_migrations()
        
        # Step 3: Verify
        if not self.verify_clean_state():
            print("‚ùå Could not verify clean state")
            return False
        
        # Step 4: Show instructions
        self.show_instructions()
        
        return True

def main():
    """Main function"""
    if len(sys.argv) > 1 and sys.argv[1] == '--help':
        print(__doc__)
        return
    
    print("‚ö†Ô∏è  WARNING: This will modify your migration files!")
    print("A backup will be created automatically.")
    print()
    
    response = input("Do you want to continue? (y/N): ").strip().lower()
    if response not in ['y', 'yes']:
        print("‚ùå Operation cancelled")
        return
    
    # Change to project directory
    script_dir = Path(__file__).parent
    project_dir = script_dir.parent.parent
    os.chdir(project_dir)
    
    # Run the fix
    fixer = MigrationFixer()
    success = fixer.run_fix()
    
    # Exit with appropriate code
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()