<?php
/**
 * Card Component Template Part
 *
 * @package RetailTradeScanner
 */

$args = wp_parse_args($args, array(
    'title' => '',
    'value' => '',
    'change' => '',
    'change_percent' => '',
    'icon' => '',
    'variant' => 'default', // default, glass, elevated
    'size' => 'base', // xs, sm, base, lg, xl
    'clickable' => false,
    'url' => '',
    'chart_data' => array(),
    'loading' => false,
    'custom_class' => ''
));

extract($args);

$card_classes = array('metric-card', 'card');
$card_classes[] = 'card-' . $variant;
$card_classes[] = 'card-' . $size;

if ($clickable) {
    $card_classes[] = 'card-clickable';
}

if ($loading) {
    $card_classes[] = 'card-loading';
}

if ($custom_class) {
    $card_classes[] = $custom_class;
}

$card_tag = $clickable && $url ? 'a' : 'div';
$card_href = $clickable && $url ? 'href="' . esc_url($url) . '"' : '';

// Determine change type for styling
$change_type = '';
if ($change || $change_percent) {
    $change_value = $change ?: $change_percent;
    if (strpos($change_value, '+') === 0) {
        $change_type = 'positive';
    } elseif (strpos($change_value, '-') === 0) {
        $change_type = 'negative';
    }
}
?>

<<?php echo $card_tag; ?> class="<?php echo esc_attr(implode(' ', $card_classes)); ?>" <?php echo $card_href; ?>>
    
    <?php if ($loading) : ?>
        <div class="card-loading-overlay">
            <div class="loading-spinner"></div>
        </div>
    <?php endif; ?>
    
    <div class="card-header">
        <div class="card-header-content">
            <?php if ($icon) : ?>
                <div class="card-icon">
                    <?php echo rts_get_icon($icon, ['width' => '24', 'height' => '24', 'class' => 'icon-primary']); ?>
                </div>
            <?php endif; ?>
            
            <?php if ($title) : ?>
                <h3 class="card-title"><?php echo esc_html($title); ?></h3>
            <?php endif; ?>
        </div>
        
        <?php if ($change || $change_percent) : ?>
            <div class="card-change">
                <?php
                get_template_part('template-parts/components/badge', null, array(
                    'value' => $change ?: $change_percent,
                    'type' => $change_type,
                    'size' => 'sm'
                ));
                ?>
            </div>
        <?php endif; ?>
    </div>
    
    <div class="card-body">
        <?php if ($value) : ?>
            <div class="card-value <?php echo $change_type; ?>">
                <?php echo esc_html($value); ?>
            </div>
        <?php endif; ?>
        
        <?php if (!empty($chart_data)) : ?>
            <div class="card-chart">
                <div class="mini-chart" data-values="<?php echo esc_attr(implode(',', $chart_data)); ?>">
                    <!-- Mini sparkline chart will be rendered here by JavaScript -->
                    <svg class="sparkline" width="100%" height="40">
                        <!-- SVG will be generated by JavaScript -->
                    </svg>
                </div>
            </div>
        <?php endif; ?>
    </div>
    
    <?php if ($clickable) : ?>
        <div class="card-footer">
            <span class="card-link-text">
                <?php esc_html_e('View Details', 'retail-trade-scanner'); ?>
                <?php echo rts_get_icon('arrow-right', ['width' => '16', 'height' => '16']); ?>
            </span>
        </div>
    <?php endif; ?>
    
</<?php echo $card_tag; ?>>

<?php if (!empty($chart_data)) : ?>
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        // Render mini sparkline chart
        const chartElement = document.querySelector('.mini-chart[data-values="<?php echo esc_js(implode(',', $chart_data)); ?>"]');
        if (chartElement) {
            renderSparkline(chartElement, [<?php echo implode(',', $chart_data); ?>]);
        }
    });
    
    function renderSparkline(container, data) {
        const svg = container.querySelector('.sparkline');
        const width = container.offsetWidth;
        const height = 40;
        const padding = 4;
        
        if (!svg || !data.length) return;
        
        // Calculate dimensions
        const chartWidth = width - (padding * 2);
        const chartHeight = height - (padding * 2);
        
        // Find min/max values
        const minValue = Math.min(...data);
        const maxValue = Math.max(...data);
        const valueRange = maxValue - minValue || 1;
        
        // Create path
        let path = '';
        
        data.forEach((value, index) => {
            const x = padding + (index * chartWidth) / (data.length - 1);
            const y = padding + chartHeight - ((value - minValue) / valueRange * chartHeight);
            
            if (index === 0) {
                path += `M ${x} ${y}`;
            } else {
                path += ` L ${x} ${y}`;
            }
        });
        
        // Create SVG path element
        svg.innerHTML = `
            <defs>
                <linearGradient id="sparkline-gradient" x1="0%" y1="0%" x2="0%" y2="100%">
                    <stop offset="0%" style="stop-color:var(--primary-500);stop-opacity:0.3" />
                    <stop offset="100%" style="stop-color:var(--primary-500);stop-opacity:0" />
                </linearGradient>
            </defs>
            <path d="${path}" stroke="var(--primary-500)" stroke-width="2" fill="none" />
            <path d="${path} L ${padding + chartWidth} ${padding + chartHeight} L ${padding} ${padding + chartHeight} Z" 
                  fill="url(#sparkline-gradient)" />
        `;
        
        svg.setAttribute('viewBox', `0 0 ${width} ${height}`);
    }
    </script>
<?php endif; ?>

<style>
/* Card Component Styles */
.metric-card {
    position: relative;
    overflow: hidden;
    transition: all var(--transition-normal) var(--easing-standard);
}

.metric-card:hover {
    transform: translateY(-2px);
}

.metric-card.card-clickable {
    cursor: pointer;
    text-decoration: none;
    color: inherit;
}

.metric-card.card-clickable:hover {
    text-decoration: none;
    color: inherit;
    box-shadow: var(--shadow-xl);
}

.metric-card.card-loading {
    pointer-events: none;
}

.card-loading-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(255, 255, 255, 0.8);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1;
}

.card-header {
    display: flex;
    align-items: flex-start;
    justify-content: space-between;
    margin-bottom: var(--spacing-md);
}

.card-header-content {
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
    flex: 1;
    min-width: 0;
}

.card-icon {
    flex-shrink: 0;
    padding: var(--spacing-sm);
    background: rgba(var(--primary-500), 0.1);
    border-radius: var(--radius-lg);
    color: var(--primary-600);
}

.card-title {
    font-size: var(--text-sm);
    font-weight: 600;
    color: var(--gray-600);
    margin: 0;
    line-height: 1.4;
}

.card-value {
    font-size: var(--text-2xl);
    font-weight: 700;
    color: var(--gray-900);
    line-height: 1.2;
    margin-bottom: var(--spacing-sm);
}

.card-value.positive {
    color: var(--success);
}

.card-value.negative {
    color: var(--danger);
}

.card-chart {
    margin-top: var(--spacing-md);
}

.mini-chart {
    width: 100%;
    height: 40px;
}

.sparkline {
    width: 100%;
    height: 100%;
}

.card-footer {
    margin-top: var(--spacing-lg);
    padding-top: var(--spacing-sm);
    border-top: 1px solid rgba(255, 255, 255, 0.1);
}

.card-link-text {
    display: flex;
    align-items: center;
    gap: var(--spacing-xs);
    font-size: var(--text-sm);
    font-weight: 600;
    color: var(--primary-600);
    transition: color var(--transition-fast) var(--easing-standard);
}

.metric-card.card-clickable:hover .card-link-text {
    color: var(--primary-700);
}

/* Card Variants */
.metric-card.card-glass {
    background: var(--surface-glass);
    backdrop-filter: blur(20px);
    border: 1px solid rgba(255, 255, 255, 0.1);
}

.metric-card.card-elevated {
    box-shadow: var(--shadow-xl);
    border: 1px solid var(--gray-200);
}

/* Card Sizes */
.metric-card.card-xs {
    padding: var(--spacing-sm);
}

.metric-card.card-xs .card-title {
    font-size: var(--text-xs);
}

.metric-card.card-xs .card-value {
    font-size: var(--text-lg);
}

.metric-card.card-sm {
    padding: var(--spacing-md);
}

.metric-card.card-sm .card-title {
    font-size: var(--text-sm);
}

.metric-card.card-sm .card-value {
    font-size: var(--text-xl);
}

.metric-card.card-lg {
    padding: var(--spacing-2xl);
}

.metric-card.card-lg .card-title {
    font-size: var(--text-base);
}

.metric-card.card-lg .card-value {
    font-size: var(--text-3xl);
}

.metric-card.card-xl {
    padding: var(--spacing-3xl);
}

.metric-card.card-xl .card-title {
    font-size: var(--text-lg);
}

.metric-card.card-xl .card-value {
    font-size: var(--text-4xl);
}

/* Responsive adjustments */
@media (max-width: 640px) {
    .card-header {
        flex-direction: column;
        align-items: flex-start;
        gap: var(--spacing-sm);
    }
    
    .card-value {
        font-size: var(--text-xl);
    }
    
    .metric-card.card-lg .card-value,
    .metric-card.card-xl .card-value {
        font-size: var(--text-2xl);
    }
}

/* Dark mode adjustments */
[data-theme="dark"] .card-title {
    color: var(--gray-300);
}

[data-theme="dark"] .card-value {
    color: var(--gray-100);
}

[data-theme="dark"] .card-loading-overlay {
    background: rgba(17, 24, 39, 0.8);
}

[data-theme="dark"] .card-footer {
    border-color: rgba(255, 255, 255, 0.1);
}
</style>