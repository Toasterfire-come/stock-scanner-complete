#!/bin/bash

# =========================================================================
# Ultimate Migration Fix - Zero User Prompts Forever
# Fixes ALL model fields with proper defaults automatically
# =========================================================================

echo "üõ†Ô∏è  Ultimate Migration Fix - No More Prompts!"

cd "$(dirname "${BASH_SOURCE[0]}")"

# Configuration
DB_NAME="stock_scanner_nasdaq"
DB_USER="stock_scanner"
DB_PASS="StockScanner2010"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() { echo -e "${BLUE}[$(date '+%H:%M:%S')]${NC} $1"; }
success() { echo -e "${GREEN}‚úÖ${NC} $1"; }
warning() { echo -e "${YELLOW}‚ö†Ô∏è${NC} $1"; }
error() { echo -e "${RED}‚ùå${NC} $1"; }

# Activate virtual environment
if [[ -f "venv/Scripts/activate" ]]; then
    source venv/Scripts/activate
    success "Virtual environment activated"
elif [[ -f "venv/bin/activate" ]]; then
    source venv/bin/activate
    success "Virtual environment activated"
else
    error "Virtual environment not found"
    exit 1
fi

# Step 1: Update .env file with correct database info
log "Updating .env configuration..."
cat > .env <<EOF
# Stock Scanner Configuration
DEBUG=false
SECRET_KEY=$(python -c "import secrets; print(secrets.token_urlsafe(50))" 2>/dev/null || echo "temp-secret-key-$(date +%s)")

# Database Configuration (MySQL)
DATABASE_URL=mysql://$DB_USER:$DB_PASS@localhost:3306/$DB_NAME

# Security Settings
ALLOWED_HOSTS=localhost,127.0.0.1

# Stock Scanner Settings
NASDAQ_ONLY=true
USE_YFINANCE_ONLY=true

# Performance Settings
DB_CONN_MAX_AGE=300
DB_CONN_HEALTH_CHECKS=true

# Logging
LOG_LEVEL=INFO
LOG_FILE=$PWD/logs/stock_scanner.log
EOF

success "Environment configuration updated"

# Step 2: Complete nuclear migration reset
log "Performing complete migration reset..."

# Stop any running Django processes
pkill -f "manage.py runserver" 2>/dev/null || true

# Delete all migration files except __init__.py
log "Cleaning up existing migration files..."
if [[ -d "stocks/migrations" ]]; then
    find stocks/migrations/ -name "*.py" ! -name "__init__.py" -delete
    find stocks/migrations/ -name "*.pyc" -delete
    success "Cleaned up migration files"
fi

# Ensure migrations directory exists
mkdir -p stocks/migrations
touch stocks/migrations/__init__.py

# Step 3: Clear Django migration state from database
log "Clearing Django migration history from database..."
python -c "
import os
import django
from django.conf import settings

try:
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'stockscanner_django.settings')
    django.setup()
    
    from django.db import connection
    
    with connection.cursor() as cursor:
        # Clear Django migration history
        cursor.execute('DROP TABLE IF EXISTS django_migrations')
        print('‚úÖ Cleared Django migration history')
        
        # Drop existing tables to start fresh
        tables_to_drop = [
            'stocks_stockalert',
            'stocks_stockprice', 
            'stocks_stock'
        ]
        
        for table in tables_to_drop:
            try:
                cursor.execute(f'DROP TABLE IF EXISTS {table}')
                print(f'‚úÖ Dropped table: {table}')
            except Exception as e:
                print(f'‚ö†Ô∏è  Could not drop {table}: {e}')
                
except Exception as e:
    print(f'‚ö†Ô∏è  Database operations warning: {e}')
    print('Continuing with migration...')
" || warning "Database cleanup had issues, continuing..."

# Step 4: Create comprehensive migration with ALL defaults
log "Creating ultimate migration with all defaults..."

# Create the migration
python manage.py makemigrations stocks --empty --name ultimate_zero_prompt_migration

# Find the created migration file
MIGRATION_FILE=$(find stocks/migrations/ -name "*ultimate_zero_prompt_migration.py" | head -1)

if [[ -n "$MIGRATION_FILE" ]]; then
    log "Writing comprehensive migration to: $MIGRATION_FILE"
    
    # Write the ultimate migration that handles everything
    cat > "$MIGRATION_FILE" <<'MIGRATION_EOF'
# Generated by Ultimate Migration Fix
from django.db import migrations, models
import django.utils.timezone

class Migration(migrations.Migration):
    initial = True
    dependencies = []

    operations = [
        migrations.CreateModel(
            name='Stock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('symbol', models.CharField(max_length=10, unique=True)),
                ('name', models.CharField(blank=True, max_length=255, default='')),
                ('sector', models.CharField(blank=True, max_length=100, default='')),
                ('industry', models.CharField(blank=True, max_length=100, default='')),
                ('exchange', models.CharField(default='NASDAQ', max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('market_cap', models.BigIntegerField(blank=True, null=True)),
                ('pe_ratio', models.FloatField(blank=True, null=True)),
                ('dividend_yield', models.FloatField(blank=True, null=True)),
                ('beta', models.FloatField(blank=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, db_index=True)),
            ],
            options={
                'ordering': ['symbol'],
                'indexes': [
                    models.Index(fields=['symbol'], name='stocks_stock_symbol_idx'),
                    models.Index(fields=['exchange'], name='stocks_stock_exchange_idx'),
                ],
            },
        ),
        migrations.CreateModel(
            name='StockAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ticker', models.CharField(max_length=10, default='UNKNOWN')),
                ('company_name', models.CharField(blank=True, max_length=255, default='')),
                ('current_price', models.FloatField(default=0.0, help_text='Current stock price in USD')),
                ('price_change_today', models.FloatField(blank=True, null=True, help_text='Price change from previous close')),
                ('price_change_percent', models.FloatField(blank=True, null=True, help_text='Percentage change from previous close')),
                ('volume_today', models.BigIntegerField(default=0)),
                ('avg_volume', models.BigIntegerField(blank=True, null=True)),
                ('dvav', models.FloatField(blank=True, null=True)),
                ('dvsa', models.FloatField(blank=True, null=True)),
                ('pe_ratio', models.FloatField(blank=True, null=True)),
                ('market_cap', models.BigIntegerField(blank=True, null=True)),
                ('note', models.TextField(blank=True, default='')),
                ('last_update', models.DateTimeField(auto_now_add=True)),
                ('sent', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['-last_update'],
                'indexes': [
                    models.Index(fields=['ticker'], name='stocks_alert_ticker_idx'),
                    models.Index(fields=['last_update'], name='stocks_alert_update_idx'),
                ],
            },
        ),
        migrations.CreateModel(
            name='StockPrice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(db_index=True)),
                ('open_price', models.FloatField(default=0.0)),
                ('high_price', models.FloatField(default=0.0)),
                ('low_price', models.FloatField(default=0.0)),
                ('close_price', models.FloatField(default=0.0)),
                ('volume', models.BigIntegerField(default=0)),
                ('adjusted_close', models.FloatField(blank=True, null=True)),
                ('price_change', models.FloatField(blank=True, null=True)),
                ('price_change_percent', models.FloatField(blank=True, null=True)),
                ('stock', models.ForeignKey(on_delete=models.CASCADE, related_name='prices', to='stocks.stock')),
            ],
            options={
                'ordering': ['-date'],
                'unique_together': {('stock', 'date')},
                'indexes': [
                    models.Index(fields=['date'], name='stocks_price_date_idx'),
                    models.Index(fields=['stock', 'date'], name='stocks_price_stock_date_idx'),
                ],
            },
        ),
    ]
MIGRATION_EOF

    success "Created ultimate migration with ALL defaults"
else
    error "Could not create migration file"
    exit 1
fi

# Step 5: Apply migrations with multiple fallback strategies
log "Applying migrations with ultimate strategy..."

# Strategy 1: Fresh migration
if python manage.py migrate --run-syncdb 2>/dev/null; then
    success "Fresh migration successful!"
elif python manage.py migrate --fake-initial 2>/dev/null && python manage.py migrate 2>/dev/null; then
    success "Fake-initial + migrate successful!"
else
    # Strategy 2: Force recreation
    warning "Standard migrations failed, forcing database recreation..."
    
    python -c "
import os
import django
from django.conf import settings

try:
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'stockscanner_django.settings')
    django.setup()
    
    from django.core.management import execute_from_command_line
    
    # Force create tables
    execute_from_command_line(['manage.py', 'migrate', '--run-syncdb'])
    print('‚úÖ Force migration successful')
    
except Exception as e:
    print(f'‚ùå Force migration failed: {e}')
    exit(1)
    " || {
        error "All migration strategies failed"
        exit 1
    }
fi

# Step 6: Comprehensive testing
log "Testing all models and defaults..."

python -c "
import django
django.setup()

from stocks.models import Stock, StockAlert, StockPrice
from django.utils import timezone

try:
    # Test model creation with all defaults
    print('üß™ Testing Stock model...')
    test_stock = Stock(symbol='TEST')
    print(f'‚úÖ Stock defaults: name={repr(test_stock.name)}, exchange={test_stock.exchange}, active={test_stock.is_active}')
    
    print('üß™ Testing StockAlert model...')
    test_alert = StockAlert()
    print(f'‚úÖ StockAlert defaults: ticker={repr(test_alert.ticker)}, current_price={test_alert.current_price}, volume_today={test_alert.volume_today}, sent={test_alert.sent}')
    
    print('üß™ Testing StockPrice model...')
    test_price = StockPrice(date=timezone.now().date())
    print(f'‚úÖ StockPrice defaults: open={test_price.open_price}, close={test_price.close_price}, volume={test_price.volume}')
    
    # Test database access
    stock_count = Stock.objects.count()
    alert_count = StockAlert.objects.count()
    price_count = StockPrice.objects.count()
    
    print(f'‚úÖ Database access: Stock({stock_count}), Alert({alert_count}), Price({price_count})')
    
    print('‚úÖ All models working perfectly with defaults!')
    
except Exception as e:
    print(f'‚ùå Model test failed: {e}')
    import traceback
    traceback.print_exc()
    exit(1)
"

if [[ $? -eq 0 ]]; then
    success "All model tests passed!"
else
    error "Model tests failed"
    exit 1
fi

# Step 7: Django system check
log "Running Django system check..."
if python manage.py check; then
    success "Django system check passed"
else
    warning "Django system check had issues"
fi

# Final summary
echo ""
echo -e "${GREEN}üéâ ULTIMATE MIGRATION FIX COMPLETE!${NC}"
echo "================================================"
echo ""
echo -e "${BLUE}‚úÖ Fixed Fields with Defaults:${NC}"
echo "   ‚Ä¢ Stock.name = ''"
echo "   ‚Ä¢ Stock.sector = ''"
echo "   ‚Ä¢ Stock.industry = ''"
echo "   ‚Ä¢ Stock.exchange = 'NASDAQ'"
echo "   ‚Ä¢ Stock.is_active = True"
echo ""
echo "   ‚Ä¢ StockAlert.ticker = 'UNKNOWN'"
echo "   ‚Ä¢ StockAlert.company_name = ''"
echo "   ‚Ä¢ StockAlert.current_price = 0.0"
echo "   ‚Ä¢ StockAlert.volume_today = 0"
echo "   ‚Ä¢ StockAlert.note = ''"
echo "   ‚Ä¢ StockAlert.last_update = auto_now_add"
echo "   ‚Ä¢ StockAlert.sent = False"
echo ""
echo "   ‚Ä¢ StockPrice.open_price = 0.0"
echo "   ‚Ä¢ StockPrice.high_price = 0.0"
echo "   ‚Ä¢ StockPrice.low_price = 0.0"
echo "   ‚Ä¢ StockPrice.close_price = 0.0"
echo "   ‚Ä¢ StockPrice.volume = 0"
echo ""
echo -e "${GREEN}‚úÖ NEVER AGAIN WILL YOU SEE MIGRATION PROMPTS!${NC}"
echo ""
echo -e "${BLUE}üöÄ Ready to run:${NC}"
echo "   python manage.py runserver"
echo ""

success "Stock Scanner migrations are bulletproof!"