#!/usr/bin/env python3
import os
import re
import sys
import json
import time
import urllib.request
from datetime import datetime

BASE = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
DATA_NASDAQ_ONLY = os.path.join(BASE, 'data', 'nasdaq_only')
DATA_COMPLETE = os.path.join(BASE, 'data', 'complete_nasdaq')

NASDAQLISTED_URL = 'https://www.nasdaqtrader.com/dynamic/SymDir/nasdaqlisted.txt'
OTHERLISTED_URL = 'https://www.nasdaqtrader.com/dynamic/SymDir/otherlisted.txt'


def fetch(url: str) -> str:
    with urllib.request.urlopen(url, timeout=30) as resp:
        return resp.read().decode('utf-8', errors='ignore')


def parse_nasdaqlisted(text: str) -> list[str]:
    out = []
    lines = [ln.strip() for ln in text.splitlines() if ln.strip() and 'File Creation Time' not in ln]
    if not lines:
        return out
    # header = lines[0]
    for ln in lines[1:]:
        parts = ln.split('|')
        if len(parts) < 8:
            continue
        symbol, *_rest, test_issue, _fin_stat, _round, etf, nextshares = parts[0], *parts[1:]
        if test_issue == 'Y' or etf == 'Y' or nextshares == 'Y':
            continue
        if any(x in symbol for x in [' ', '.', '$', '+', '=']):
            continue
        bad_suffixes = ('W', 'WS', 'WTS', 'U', 'UN', 'RT', 'R')
        if any(symbol.endswith(s) for s in bad_suffixes):
            continue
        out.append(symbol.upper())
    return out


def parse_otherlisted(text: str, exchanges: set[str] = {'N'}) -> list[str]:
    out = []
    lines = [ln.strip() for ln in text.splitlines() if ln.strip() and 'File Creation Time' not in ln]
    if not lines:
        return out
    for ln in lines[1:]:
        parts = ln.split('|')
        if len(parts) < 8:
            continue
        act_symbol, _sec, exchange, _cqs, etf, _lot, test_issue, _nas = parts[:8]
        if exchange not in exchanges or etf == 'Y' or test_issue == 'Y':
            continue
        if any(x in act_symbol for x in [' ', '.', '$', '+', '=']):
            continue
        bad_suffixes = ('W', 'WS', 'WTS', 'U', 'UN', 'RT', 'R')
        if any(act_symbol.endswith(s) for s in bad_suffixes):
            continue
        out.append(act_symbol.upper())
    return out


def write_py_list(path: str, var_name: str, values: list[str]) -> None:
    os.makedirs(os.path.dirname(path), exist_ok=True)
    with open(path, 'w', encoding='utf-8') as f:
        f.write('# Auto-generated by tools/update_tickers.py\n')
        f.write(f'{var_name} = [\n')
        for s in values:
            f.write(f"    '{s}',\n")
        f.write(']\n')


def main():
    ts = datetime.utcnow().strftime('%Y%m%d_%H%M%S')
    print('Fetching official lists...')
    try:
        nasdaq_txt = fetch(NASDAQLISTED_URL)
        other_txt = fetch(OTHERLISTED_URL)
    except Exception as e:
        print('Fetch failed:', e)
        sys.exit(1)

    os.makedirs(DATA_COMPLETE, exist_ok=True)
    with open(os.path.join(DATA_COMPLETE, 'nasdaqlisted.txt'), 'w', encoding='utf-8') as f:
        f.write(nasdaq_txt)
    with open(os.path.join(DATA_COMPLETE, 'otherlisted.txt'), 'w', encoding='utf-8') as f:
        f.write(other_txt)

    nasdaq_syms = parse_nasdaqlisted(nasdaq_txt)
    nyse_syms = parse_otherlisted(other_txt, exchanges={'N'})

    nasdaq_out = os.path.join(DATA_NASDAQ_ONLY, f'nasdaq_only_tickers_{ts}.py')
    complete_out = os.path.join(DATA_COMPLETE, f'complete_nasdaq_tickers_{ts}.py')

    write_py_list(nasdaq_out, 'NASDAQ_ONLY_TICKERS', nasdaq_syms)

    seen = set()
    combined = []
    for s in nasdaq_syms + nyse_syms:
        if s not in seen:
            seen.add(s)
            combined.append(s)
    write_py_list(complete_out, 'COMPLETE_NASDAQ_TICKERS', combined)

    print('Wrote:')
    print(' ', nasdaq_out, len(nasdaq_syms))
    print(' ', complete_out, len(combined))


if __name__ == '__main__':
    main()
