#!/usr/bin/env python3
"""
Windows Migration Fix Script - Automated
Fixes Django migration conflicts automatically for Windows production environment.

This script:
1. Backs up existing migrations
2. Creates a clean migration sequence
3. Resolves all conflicts automatically
4. No user input required

Usage:
python fix_migrations_windows.py

Author: Stock Scanner Project
Version: 1.0.0
"""

import os
import shutil
import sys
from datetime import datetime
from pathlib import Path

def main():
"""Main function - automated migration fix"""
print(" Windows Migration Conflict Fixer - AUTOMATED")
print("=" * 60)

app_name = "stocks"
migrations_dir = Path(f"{app_name}/migrations")
backup_dir = Path(f"migration_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}")

print(f" App: {app_name}")
print(f" Migrations: {migrations_dir}")
print(f" Backup: {backup_dir}")
print()

# Step 1: Create backup
print(" Creating backup of existing migrations...")
if migrations_dir.exists():
shutil.copytree(migrations_dir, backup_dir)
print(f" Backup created: {backup_dir}")
else:
print(" Migrations directory not found")
return False

# Step 2: Remove problematic migrations but keep __init__.py
print("\nðŸ§¹ Cleaning conflicting migrations...")
for file in migrations_dir.glob("*.py"):
if file.name != "__init__.py":
print(f" Removing: {file.name}")
file.unlink()

# Step 3: Create clean initial migration
print("\n Creating clean initial migration...")

initial_migration = '''# Generated by Django migration fixer - Windows Production

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

initial = True

dependencies = [
migrations.swappable_dependency(settings.AUTH_USER_MODEL),
]

operations = [
migrations.CreateModel(
name='StockAlert',
fields=[
('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
('symbol', models.CharField(db_index=True, help_text='Stock ticker symbol (e.g., AAPL)', max_length=10)),
('target_price', models.DecimalField(decimal_places=2, help_text='Target price for alert', max_digits=10)),
('alert_type', models.CharField(choices=[('above', 'Above Target'), ('below', 'Below Target')], help_text='Alert when price goes above or below target', max_length=5)),
('is_active', models.BooleanField(default=True, help_text='Whether this alert is active')),
('created_at', models.DateTimeField(auto_now_add=True)),
('updated_at', models.DateTimeField(auto_now=True)),
('triggered_at', models.DateTimeField(blank=True, help_text='When the alert was triggered', null=True)),
('sent', models.BooleanField(default=False, help_text='Whether notification has been sent')),
('company_name', models.CharField(blank=True, max_length=255)),
('price_change_today', models.FloatField(blank=True, help_text='Price change from previous close', null=True)),
('price_change_percent', models.FloatField(blank=True, help_text='Percentage change from previous close', null=True)),
('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stock_alerts', to=settings.AUTH_USER_MODEL)),
],
options={
'verbose_name': 'Stock Alert',
'verbose_name_plural': 'Stock Alerts',
'ordering': ['-created_at'],
},
),
migrations.CreateModel(
name='UserMembership',
fields=[
('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
('membership_type', models.CharField(choices=[('free', 'Free - $0/month'), ('basic', 'Basic - $9.99/month'), ('professional', 'Professional - $29.99/month'), ('expert', 'Expert - $49.99/month')], default='free', help_text='User membership level', max_length=20)),
('created_at', models.DateTimeField(auto_now_add=True)),
('updated_at', models.DateTimeField(auto_now=True)),
('stripe_customer_id', models.CharField(blank=True, help_text='Stripe customer ID for billing', max_length=255)),
('stripe_subscription_id', models.CharField(blank=True, help_text='Stripe subscription ID', max_length=255)),
('subscription_status', models.CharField(choices=[('active', 'Active'), ('canceled', 'Canceled'), ('past_due', 'Past Due'), ('unpaid', 'Unpaid')], default='active', help_text='Subscription status', max_length=20)),
('next_billing_date', models.DateField(blank=True, help_text='Next billing date', null=True)),
('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='membership', to=settings.AUTH_USER_MODEL)),
],
options={
'verbose_name': 'User Membership',
'verbose_name_plural': 'User Memberships',
},
),
migrations.CreateModel(
name='APIUsageTracking',
fields=[
('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
('endpoint', models.CharField(db_index=True, max_length=200)),
('method', models.CharField(choices=[('GET', 'GET'), ('POST', 'POST'), ('PUT', 'PUT'), ('DELETE', 'DELETE'), ('PATCH', 'PATCH')], max_length=10)),
('timestamp', models.DateTimeField(auto_now_add=True, db_index=True)),
('response_time_ms', models.IntegerField(help_text='Response time in milliseconds')),
('status_code', models.IntegerField()),
('ip_address', models.GenericIPAddressField()),
('user_agent', models.TextField(blank=True)),
('request_size_bytes', models.IntegerField(default=0)),
('response_size_bytes', models.IntegerField(default=0)),
('membership_tier', models.CharField(db_index=True, max_length=20)),
('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
],
options={
'verbose_name': 'API Usage Tracking',
'verbose_name_plural': 'API Usage Tracking',
'ordering': ['-timestamp'],
},
),
migrations.AddIndex(
model_name='stockalert',
index=models.Index(fields=['symbol', 'user'], name='stocks_stockalert_symbol_user_idx'),
),
migrations.AddIndex(
model_name='stockalert',
index=models.Index(fields=['-created_at'], name='stocks_stockalert_created_idx'),
),
migrations.AddIndex(
model_name='apiusagetracking',
index=models.Index(fields=['endpoint', 'timestamp'], name='stocks_apiusage_endpoint_time_idx'),
),
migrations.AddIndex(
model_name='apiusagetracking',
index=models.Index(fields=['user', 'timestamp'], name='stocks_apiusage_user_time_idx'),
),
]
'''

with open(migrations_dir / "0001_initial.py", 'w', encoding='utf-8') as f:
f.write(initial_migration)

print(" Created clean 0001_initial.py with all models and fields")

# Step 4: Verify clean state
print("\n Verifying clean migration state...")
migration_files = [f for f in migrations_dir.glob("*.py") if f.name != "__init__.py"]

if len(migration_files) == 1 and migration_files[0].name == "0001_initial.py":
print(" Clean migration state verified")
else:
print(f" Expected 1 migration file, found {len(migration_files)}")
return False

# Step 5: Show next steps
print("\n" + "=" * 60)
print(" MIGRATION FIX COMPLETE - NEXT STEPS")
print("=" * 60)
print("1. Run Django migrations:")
print(" python manage.py migrate")
print()
print("2. If you have existing data, use:")
print(" python manage.py migrate --fake-initial")
print()
print("3. Create a superuser:")
print(" python manage.py createsuperuser")
print()
print("4. Test the server:")
print(" python manage.py runserver")
print()
print(" Migration conflicts have been resolved!")
print(f" Backup available at: {backup_dir}")
print("\n Ready for production deployment!")

return True

if __name__ == "__main__":
try:
success = main()
if success:
print("\n SUCCESS: Migration conflicts fixed!")
else:
print("\n FAILED: Could not fix migration conflicts")
input("\nPress Enter to continue...")
except KeyboardInterrupt:
print("\n Operation cancelled by user")
except Exception as e:
print(f"\n Error: {e}")
input("\nPress Enter to continue...")