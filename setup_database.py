#!/usr/bin/env python3
"""
Interactive Database Setup for Stock Scanner
Prompts user for database credentials and creates .env file
"""

import os
import getpass
from pathlib import Path

def main():
print(" Stock Scanner Database Setup")
print("=" * 40)

# Get database type
print("\n Choose your database:")
print("1. PostgreSQL (recommended)")
print("2. SQLite (development only)")

while True:
choice = input("\nEnter choice (1 or 2): ").strip()
if choice in ['1', '2']:
break
print(" Please enter 1 or 2")

if choice == '1':
setup_postgresql()
else:
setup_sqlite()

def setup_postgresql():
print("\n PostgreSQL Setup")
print("-" * 20)

# Get database credentials
host = input("Database host (default: localhost): ").strip() or "localhost"
port = input("Database port (default: 5432): ").strip() or "5432"
database = input("Database name (default: stockscanner_db): ").strip() or "stockscanner_db"
username = input("Database username (default: postgres): ").strip() or "postgres"

# Get password securely
password = getpass.getpass("Database password: ")

# Construct DATABASE_URL
database_url = f"postgresql://{username}:{password}@{host}:{port}/{database}"

create_env_file(database_url, "PostgreSQL")

def setup_sqlite():
print("\n SQLite Setup")
print("-" * 15)

database_url = "sqlite:///db.sqlite3"
create_env_file(database_url, "SQLite")

def create_env_file(database_url, db_type):
env_content = f"""# Stock Scanner Environment Configuration
# Generated by setup_database.py

DEBUG=True
SECRET_KEY=django-insecure-gitbash-development-key-change-in-production
ALLOWED_HOSTS=127.0.0.1,localhost,0.0.0.0

# Database Configuration ({db_type})
DATABASE_URL={database_url}

# Email Configuration (Development)
EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend

# Scheduler Configuration
SCHEDULER_ENABLED=True
NASDAQ_UPDATE_INTERVAL=10

# Stock Data Configuration
YFINANCE_TIMEOUT=30
YFINANCE_RETRY_COUNT=3

# News Configuration
NEWS_SCRAPER_ENABLED=True
NEWS_SCRAPER_TIMEOUT=30
"""

# Write .env file
env_path = Path(".env")
with open(env_path, "w") as f:
f.write(env_content)

print(f"\n Created .env file with {db_type} configuration")
print(f" File location: {env_path.absolute()}")

# Show next steps
print(f"\n Next steps:")
print("1. Run: python manage.py migrate")
print("2. Run: python manage.py createsuperuser")
print("3. Run: python manage.py runserver")

# Test database connection
test_connection = input("\n Test database connection now? (y/n): ").strip().lower()
if test_connection == 'y':
test_database_connection()

def test_database_connection():
print("\n Testing database connection...")

try:
import django
from django.conf import settings
from django.core.management import execute_from_command_line
import sys

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'stockscanner_django.settings')
django.setup()

# Test database connection
from django.db import connection
cursor = connection.cursor()
cursor.execute("SELECT 1")
result = cursor.fetchone()

if result:
print(" Database connection successful!")
return True
else:
print(" Database connection failed")
return False

except Exception as e:
print(f" Database connection error: {e}")
print("\n Troubleshooting tips:")
print("- Check if PostgreSQL is running")
print("- Verify database credentials")
print("- Ensure database exists")
return False

if __name__ == "__main__":
main()