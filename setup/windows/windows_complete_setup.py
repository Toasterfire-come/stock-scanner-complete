#!/usr/bin/env python
"""
Complete Windows Setup Script for Stock Scanner
Automatically handles all setup, database configuration, and bug checking for Windows CMD.

This script:
1. Creates .env file with proper database configuration
2. Sets up database (MySQL or SQLite based on availability)
3. Installs all dependencies
4. Fixes migration conflicts
5. Runs comprehensive bug checks
6. Provides step-by-step Windows CMD commands

Usage:
    python windows_complete_setup.py

Author: Stock Scanner Project
Version: 2.0.0 - Windows CMD Optimized
"""

import os
import sys
import subprocess
import time
import shutil
from pathlib import Path
from datetime import datetime

def print_header(title):
    """Print a formatted header"""
    print("\n" + "=" * 60)
    print(f"üöÄ {title}")
    print("=" * 60)

def print_step(message):
    """Print a formatted step message"""
    print(f"\nüîß {message}")

def print_success(message):
    """Print a formatted success message"""
    print(f"‚úÖ {message}")

def print_error(message):
    """Print a formatted error message"""
    print(f"‚ùå {message}")

def print_warning(message):
    """Print a formatted warning message"""
    print(f"‚ö†Ô∏è  {message}")

def run_cmd(command, check=True, capture_output=False):
    """Run a Windows CMD command"""
    try:
        if capture_output:
            result = subprocess.run(command, shell=True, capture_output=True, text=True, check=check)
            return result.stdout.strip()
        else:
            result = subprocess.run(command, shell=True, check=check)
            return result.returncode == 0
    except subprocess.CalledProcessError as e:
        if check:
            print_error(f"Command failed: {command}")
            print(f"Error: {e}")
        return False
    except Exception as e:
        print_error(f"Error running command: {command}")
        print(f"Error: {e}")
        return False

def check_python():
    """Check Python installation"""
    print_step("Checking Python installation...")
    try:
        version = run_cmd("python --version", capture_output=True)
        if version:
            print_success(f"Python found: {version}")
            return True
        else:
            print_error("Python not found in PATH")
            return False
    except:
        print_error("Python check failed")
        return False

def check_mysql():
    """Check if MySQL is available"""
    print_step("Checking MySQL availability...")
    
    # Try to check MySQL service
    try:
        result = run_cmd('sc query mysql', capture_output=True)
        if "RUNNING" in result or "STOPPED" in result:
            print_success("MySQL service found")
            return True
    except:
        pass
    
    # Try to check mysql command
    try:
        result = run_cmd('mysql --version', capture_output=True)
        if result and "mysql" in result.lower():
            print_success(f"MySQL command found: {result}")
            return True
    except:
        pass
    
    print_warning("MySQL not found - will use SQLite")
    return False

def create_env_file():
    """Create .env file with appropriate database configuration"""
    print_step("Creating .env configuration file...")
    
    mysql_available = check_mysql()
    
    if mysql_available:
        database_config = """# Database Configuration (MySQL)
DATABASE_URL=mysql://stock_scanner_user:StockScannerPass2024@localhost:3306/stock_scanner_db
DB_ENGINE=django.db.backends.mysql
DB_NAME=stock_scanner_db
DB_USER=stock_scanner_user
DB_PASSWORD=StockScannerPass2024
DB_HOST=localhost
DB_PORT=3306"""
    else:
        database_config = """# Database Configuration (SQLite)
DATABASE_URL=sqlite:///./db.sqlite3
DB_ENGINE=django.db.backends.sqlite3
DB_NAME=db.sqlite3
DB_USER=
DB_PASSWORD=
DB_HOST=
DB_PORT="""
    
    env_content = f"""# Stock Scanner Production Environment Configuration
# Generated by windows_complete_setup.py on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

# Django Settings
SECRET_KEY=django-insecure-windows-setup-key-change-in-production
DEBUG=True
ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0

{database_config}

# Email Configuration
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USE_TLS=True
EMAIL_HOST_USER=your-email@gmail.com
EMAIL_HOST_PASSWORD=your-app-password
DEFAULT_FROM_EMAIL=your-email@gmail.com

# Celery Configuration (Disabled for Windows development)
CELERY_ENABLED=false
CELERY_BROKER_URL=redis://localhost:6379/0

# Redis Configuration (Optional)
REDIS_URL=redis://localhost:6379/0

# Yahoo Finance API Configuration
YFINANCE_RATE_LIMIT=True
YFINANCE_MAX_REQUESTS_PER_MINUTE=60
YFINANCE_DELAY_BETWEEN_REQUESTS=1.0

# Payment Configuration (Optional)
STRIPE_PUBLISHABLE_KEY=your-stripe-publishable-key
STRIPE_SECRET_KEY=your-stripe-secret-key

# WordPress Integration (Optional)
WORDPRESS_URL=http://localhost/wordpress
WORDPRESS_USERNAME=admin
WORDPRESS_PASSWORD=password

# Security Settings
SECURE_SSL_REDIRECT=False
SECURE_BROWSER_XSS_FILTER=True
SECURE_CONTENT_TYPE_NOSNIFF=True
X_FRAME_OPTIONS=DENY

# Logging
LOG_LEVEL=INFO
LOG_FILE=logs/stock_scanner.log
"""
    
    try:
        with open('.env', 'w', encoding='utf-8') as f:
            f.write(env_content)
        print_success(f".env file created with {'MySQL' if mysql_available else 'SQLite'} configuration")
        return mysql_available
    except Exception as e:
        print_error(f"Failed to create .env file: {e}")
        return False

def setup_mysql():
    """Setup MySQL database"""
    print_step("Setting up MySQL database...")
    
    commands = [
        'net start mysql',
        'mysql -u root -e "ALTER USER \'root\'@\'localhost\' IDENTIFIED BY \'StockScannerPass2024\';"',
        'mysql -u root -pStockScannerPass2024 -e "CREATE DATABASE IF NOT EXISTS stock_scanner_db;"',
        'mysql -u root -pStockScannerPass2024 -e "CREATE USER IF NOT EXISTS \'stock_scanner_user\'@\'localhost\' IDENTIFIED BY \'StockScannerPass2024\';"',
        'mysql -u root -pStockScannerPass2024 -e "GRANT ALL PRIVILEGES ON stock_scanner_db.* TO \'stock_scanner_user\'@\'localhost\';"',
        'mysql -u root -pStockScannerPass2024 -e "FLUSH PRIVILEGES;"'
    ]
    
    for cmd in commands:
        print(f"Running: {cmd}")
        if not run_cmd(cmd, check=False):
            print_warning(f"Command may have failed: {cmd}")
    
    print_success("MySQL setup completed")

def install_requirements():
    """Install Python requirements"""
    print_step("Installing Python requirements...")
    
    # Ensure we're using the virtual environment python
    pip_cmd = "pip"
    if os.path.exists("venv\\Scripts\\pip.exe"):
        pip_cmd = "venv\\Scripts\\pip.exe"
    
    if run_cmd(f"{pip_cmd} install -r requirements.txt"):
        print_success("Requirements installed successfully")
        return True
    else:
        print_error("Failed to install requirements")
        return False

def fix_migrations():
    """Fix Django migration conflicts"""
    print_step("Fixing Django migration conflicts...")
    
    if run_cmd("python fix_migrations_windows.py"):
        print_success("Migration conflicts fixed")
        return True
    else:
        print_error("Failed to fix migrations")
        return False

def run_migrations():
    """Run Django migrations"""
    print_step("Running Django migrations...")
    
    if run_cmd("python manage.py migrate"):
        print_success("Migrations completed successfully")
        return True
    else:
        print_error("Migration failed")
        return False

def test_django():
    """Test Django startup"""
    print_step("Testing Django configuration...")
    
    if run_cmd("python test_django_startup.py"):
        print_success("Django test passed")
        return True
    else:
        print_error("Django test failed")
        return False

def create_windows_batch_files():
    """Create optimized Windows batch files"""
    print_step("Creating Windows batch files...")
    
    # 1. Setup batch file
    setup_bat = """@echo off
title Stock Scanner - Complete Setup
echo üöÄ Stock Scanner Complete Setup for Windows
echo =============================================

echo.
echo üîß Step 1: Running complete setup...
python windows_complete_setup.py

echo.
echo üîß Step 2: Activating virtual environment...
if exist "venv\\Scripts\\activate.bat" (
    call venv\\Scripts\\activate.bat
    echo ‚úÖ Virtual environment activated
) else (
    echo ‚ö†Ô∏è  Creating virtual environment...
    python -m venv venv
    call venv\\Scripts\\activate.bat
    echo ‚úÖ Virtual environment created and activated
)

echo.
echo üîß Step 3: Installing requirements...
pip install -r requirements.txt

echo.
echo üîß Step 4: Setting up database...
python windows_complete_setup.py --database-only

echo.
echo üîß Step 5: Running migrations...
python manage.py migrate

echo.
echo ‚úÖ Setup complete! You can now run:
echo    start_app.bat
echo.
pause
"""
    
    # 2. Start app batch file
    start_bat = """@echo off
title Stock Scanner - Application
echo üöÄ Starting Stock Scanner Application
echo ====================================

REM Activate virtual environment
if exist "venv\\Scripts\\activate.bat" (
    call venv\\Scripts\\activate.bat
    echo ‚úÖ Virtual environment activated
) else (
    echo ‚ùå Virtual environment not found!
    echo üí° Please run setup.bat first
    pause
    exit /b 1
)

echo.
echo üîß Installing/updating requirements...
pip install -r requirements.txt

echo.
echo üîß Running migrations...
python manage.py migrate

echo.
echo üîß Collecting static files...
python manage.py collectstatic --noinput

echo.
echo üöÄ Starting Django development server...
echo üåê Open your browser to: http://127.0.0.1:8000
echo.
python manage.py runserver
"""
    
    # 3. Database setup batch file
    db_setup_bat = """@echo off
title Stock Scanner - Database Setup
echo üîß Stock Scanner Database Setup
echo ===============================

echo.
echo üìã Choose your database option:
echo.
echo 1. MySQL (Production ready, requires MySQL installed)
echo 2. SQLite (Development/testing, no additional software needed)
echo.

:choice
set /p choice="Enter your choice (1 or 2): "

if "%choice%"=="1" goto mysql
if "%choice%"=="2" goto sqlite
echo ‚ùå Invalid choice. Please enter 1 or 2.
goto choice

:mysql
echo.
echo üîß Setting up MySQL database...
python windows_complete_setup.py --mysql-setup
goto migrations

:sqlite
echo.
echo üîß Setting up SQLite database...
python windows_complete_setup.py --sqlite-setup
goto migrations

:migrations
echo.
echo üîß Fixing migration conflicts...
python fix_migrations_windows.py

echo.
echo üîß Running migrations...
python manage.py migrate

echo.
echo üîß Testing Django...
python test_django_startup.py

echo.
echo ‚úÖ Database setup complete!
echo.
pause
"""
    
    # 4. Test everything batch file
    test_bat = """@echo off
title Stock Scanner - System Test
echo üß™ Stock Scanner System Test
echo ============================

REM Activate virtual environment
if exist "venv\\Scripts\\activate.bat" (
    call venv\\Scripts\\activate.bat
    echo ‚úÖ Virtual environment activated
) else (
    echo ‚ùå Virtual environment not found!
    echo üí° Please run setup.bat first
    pause
    exit /b 1
)

echo.
echo üß™ Running comprehensive system test...
python windows_complete_setup.py --test-only

echo.
pause
"""
    
    batch_files = {
        'setup.bat': setup_bat,
        'start_app.bat': start_bat,
        'setup_database.bat': db_setup_bat,
        'test_system.bat': test_bat
    }
    
    for filename, content in batch_files.items():
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(content)
            print_success(f"Created {filename}")
        except Exception as e:
            print_error(f"Failed to create {filename}: {e}")

def comprehensive_bug_check():
    """Run comprehensive bug check"""
    print_header("COMPREHENSIVE BUG CHECK")
    
    issues_found = []
    
    # Check 1: Python installation
    if not check_python():
        issues_found.append("Python not properly installed or not in PATH")
    
    # Check 2: Virtual environment
    if not os.path.exists("venv"):
        issues_found.append("Virtual environment not found")
    elif not os.path.exists("venv\\Scripts\\python.exe"):
        issues_found.append("Virtual environment corrupted")
    
    # Check 3: Requirements file
    if not os.path.exists("requirements.txt"):
        issues_found.append("requirements.txt missing")
    
    # Check 4: Django project structure
    required_dirs = ["stocks", "stockscanner_django", "core"]
    for dir_name in required_dirs:
        if not os.path.exists(dir_name):
            issues_found.append(f"Required directory missing: {dir_name}")
    
    # Check 5: manage.py
    if not os.path.exists("manage.py"):
        issues_found.append("manage.py missing")
    
    # Check 6: Environment file
    if not os.path.exists(".env"):
        issues_found.append(".env file missing")
    
    # Check 7: Migration files
    migrations_dir = Path("stocks/migrations")
    if not migrations_dir.exists():
        issues_found.append("stocks/migrations directory missing")
    
    # Check 8: Database configuration
    try:
        if os.path.exists(".env"):
            with open(".env", "r") as f:
                env_content = f.read()
                if "DATABASE_URL" not in env_content:
                    issues_found.append("DATABASE_URL not configured in .env")
    except:
        issues_found.append("Cannot read .env file")
    
    # Report results
    if issues_found:
        print_error(f"Found {len(issues_found)} issues:")
        for i, issue in enumerate(issues_found, 1):
            print(f"  {i}. {issue}")
        return False
    else:
        print_success("No critical issues found!")
        return True

def main():
    """Main setup function"""
    if len(sys.argv) > 1:
        # Handle command line arguments for specific operations
        arg = sys.argv[1]
        if arg == "--database-only":
            mysql_available = check_mysql()
            if mysql_available:
                setup_mysql()
            return
        elif arg == "--mysql-setup":
            create_env_file()
            setup_mysql()
            return
        elif arg == "--sqlite-setup":
            create_env_file()
            return
        elif arg == "--test-only":
            comprehensive_bug_check()
            return
    
    print_header("STOCK SCANNER WINDOWS COMPLETE SETUP")
    print("üéØ This script will configure everything for Windows CMD compatibility")
    print("‚è±Ô∏è  Estimated time: 3-5 minutes")
    
    # Step 1: Environment file
    mysql_available = create_env_file()
    
    # Step 2: Create Windows batch files
    create_windows_batch_files()
    
    # Step 3: Setup database if MySQL is available
    if mysql_available:
        setup_mysql()
    
    # Step 4: Bug check
    print_header("RUNNING BUG CHECK")
    comprehensive_bug_check()
    
    # Step 5: Final instructions
    print_header("SETUP COMPLETE!")
    print_success("Windows CMD-optimized setup completed!")
    
    print("\nüìã Next Steps:")
    print("1. Double-click 'setup.bat' to complete full installation")
    print("2. Double-click 'start_app.bat' to start the application") 
    print("3. Run 'test_system.bat' to verify everything works")
    
    print("\nüîß Manual Commands (if needed):")
    if mysql_available:
        print("Database: MySQL (production-ready)")
    else:
        print("Database: SQLite (development)")
    
    print("\nActivate environment: venv\\Scripts\\activate")
    print("Install requirements: pip install -r requirements.txt")
    print("Run migrations: python manage.py migrate")
    print("Start server: python manage.py runserver")
    
    print("\nüöÄ Open your browser to: http://127.0.0.1:8000")

if __name__ == "__main__":
    main()